<?xml version="1.0" encoding="UTF-8"?>
<framework>
	<library>
		<title>Utils</title>
		<details>
			<method>
				<name>CleanTelNumber</name>
				<code>mcd.test.utils.testCleanTelNumber(mcd.properties.utils.cleanTelNumber.rawTelNumber,mcd.properties.utils.cleanTelNumber.expectedOutput,1)</code>
			</method>
			<method>
				<name>isBoolean</name>
				<code>mcd.test.utils.testIsBoolean(mcd.properties.utils.isBoolean.testInput,mcd.properties.utils.isBoolean.opt_warn,mcd.properties.utils.isBoolean.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsNull</name>
				<code>mcd.test.utils.testIsNull(mcd.properties.utils.isNull.testInput,mcd.properties.utils.isNull.opt_warn,mcd.properties.utils.isNull.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsNumber</name>
				<code>mcd.test.utils.testIsNumber(mcd.properties.utils.isNumber.testInput,mcd.properties.utils.isNumber.opt_warn,mcd.properties.utils.isNumber.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsString</name>
				<code>mcd.test.utils.testIsString(mcd.properties.utils.isString.testInput,mcd.properties.utils.isString.opt_warn,mcd.properties.utils.isString.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsValidEmail</name>
				<code>mcd.test.utils.testIsValidEmail(mcd.properties.utils.isValidEmail.emailAddress,mcd.properties.utils.isValidEmail.opt_warn,mcd.properties.utils.isValidEmail.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsValidUSZipCode</name>
				<code>mcd.test.utils.testIsValidUSZipCode(mcd.properties.utils.isValidUSZipCode.zipCode,mcd.properties.utils.isValidUSZipCode.opt_warn,mcd.properties.utils.isValidUSZipCode.expectedOutput,1)</code>
			</method>
			<method>
				<name>IsValidWebAddress</name>
				<code>mcd.test.utils.testIsValidWebAddress(mcd.properties.utils.isValidWebAddress.webAddress,mcd.properties.utils.isValidWebAddress.opt_warn,mcd.properties.utils.isValidWebAddress.expectedOutput,1)</code>
			</method>
			<method>
				<name>Scale</name>
				<code>mcd.test.utils.testScale(mcd.properties.utils.scale.numToScale,mcd.properties.utils.scale.positioning,mcd.properties.utils.scale.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>File</title>
		<details>
			<method>
				<name>CheckFileExistence</name>
				<code>mcd.test.file.testCheckFileExistence(mcd.properties.file.checkFileExistence.filePath,mcd.properties.file.checkFileExistence.fileName,mcd.properties.file.checkFileExistence.expectedOutput,1)</code>
			</method>
			<method>
				<name>WriteToFile</name>
				<code>mcd.test.file.testWriteToFile(mcd.properties.file.writeToFile.filePath,mcd.properties.file.writeToFile.fileName,mcd.properties.file.writeToFile.content,mcd.properties.file.writeToFile.expectedOutput,1)</code>
			</method>
			<method>
				<name>AppendToFile</name>
				<code>mcd.test.file.testAppendToFile(mcd.properties.file.appendToFile.filePath,mcd.properties.file.appendToFile.fileName,mcd.properties.file.appendToFile.content,mcd.properties.file.appendToFile.existingContent,mcd.properties.file.appendToFile.expectedOutput,1)</code>
			</method>
			<method>
				<name>ReadFromFile</name>
				<code>mcd.test.file.testReadFromFile(mcd.properties.file.readFromFile.filePath,mcd.properties.file.readFromFile.fileName,mcd.properties.file.readFromFile.expectedOutput,1)</code>
			</method>
			<method>
				<name>CheckAvailableSpace</name>
				<code>mcd.test.file.testCheckAvailableSpace(mcd.properties.file.checkAvailableSpace.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>DB</title>
		<details>
			<method>
				<name>ExecuteSql</name>
				<code>mcd.test.db.testExecuteSql(mcd.properties.db.executeSql.databaseName,mcd.properties.db.executeSql.sqlQueryList,mcd.properties.db.executeSql.paramsList,mcd.properties.db.executeSql.evt,mcd.properties.db.executeSql.expectedOutput1,mcd.properties.db.executeSql.expectedOutput2,1)</code>
			</method>
			<method>
				<name>ExecuteSqlWithReturn</name>
				<code>mcd.test.db.testExecuteSqlWithReturn(mcd.properties.db.executeSqlWithReturn.databaseName,mcd.properties.db.executeSqlWithReturn.sqlQuery,mcd.properties.db.executeSqlWithReturn.params,mcd.properties.db.executeSqlWithReturn.expectedOutput,1)</code>
			</method>
			<method>
				<name>DeleteDB</name>
				<code>mcd.test.db.testDeleteDB(mcd.properties.db.deleteDB.databaseName,mcd.properties.db.deleteDB.evt,mcd.properties.db.deleteDB.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Security</title>
		<details>
			<method>
				<name>Encrypt</name>
				<code>mcd.test.security.testEncryptStr(mcd.properties.security.encrypt.stringToEncrypt,mcd.properties.security.encrypt.key,mcd.properties.security.encrypt.expectedOutput,1)</code>
			</method>
			<method>
				<name>Decrypt</name>
				<code>mcd.test.security.testDecryptStr(mcd.properties.security.decrypt.stringToEncrypt,mcd.properties.security.decrypt.key,mcd.properties.security.decrypt.expectedOutput,1)</code>
			</method>
			<method>
				<name>SetString</name>
				<code>mcd.test.security.testSetString(mcd.properties.security.setString.name,mcd.properties.security.setString.value,mcd.properties.security.setString.key,mcd.properties.security.setString.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetString</name>
				<code>mcd.test.security.testGetString(mcd.properties.security.getString.name,mcd.properties.security.getString.key,mcd.properties.security.getString.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Sessionmgmt</title>
		<details>
			<method>
				<name>GetCookie</name>
				<code>mcd.test.session.testGetCookie(mcd.properties.sessionmgmt.getCookie.name,mcd.properties.sessionmgmt.getCookie.expectedOutput,1)</code>
			</method>
			<method>
				<name>RemoveAllCookies</name>
				<code>mcd.test.session.testRemoveAllCookies(mcd.properties.sessionmgmt.removeAllCookies.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Location</title>
		<details>
			<method>
				<name>SetPurpose</name>
				<code>mcd.test.location.testSetPurpose(mcd.properties.location.setPurpose.purpose,mcd.properties.location.setPurpose.expectedOutput,1)</code>
			</method>
			<method>
				<name>CreateAnnotation</name>
				<code>mcd.test.location.testCreateAnnotation(mcd.properties.location.createAnnotation.location,mcd.properties.location.createAnnotation.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetAddress</name>
				<code>mcd.test.location.testGetAddress(mcd.properties.location.getAddress.location,mcd.properties.location.getAddress.evt,mcd.properties.location.getAddress.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetPosition</name>
				<code>mcd.test.location.testGetPosition(mcd.properties.location.getPosition.evt,mcd.properties.location.getPosition.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Network</title>
		<details>
			<method>
				<name>CheckNetworkConnection</name>
				<code>mcd.test.network.testCheckNetworkConnection(mcd.properties.network.checkNetworkConnection.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetNetworkType</name>
				<code>mcd.test.network.testGetNetworkType(mcd.properties.network.getNetworkType.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Services.restaurant</title>
		<details>
			<method>
				<name>CreateAnnotations</name>
				<code>mcd.test.restaurant.testCreateAnnotations(mcd.properties.restaurant.createAnnotations.mapObj,mcd.properties.restaurant.createAnnotations.expectedOutput1,mcd.properties.restaurant.createAnnotations.expectedOutput2,1)</code>
			</method>
			<method>
				<name>LocateUser</name>
				<code>mcd.test.restaurant.testLocateUser(mcd.properties.restaurant.locateUser.evt,mcd.properties.restaurant.locateUser.expectedOutput1,mcd.properties.restaurant.locateUser.expectedOutput2,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Cache</title>
		<details>
			<method>
				<name>Init</name>
				<code>mcd.test.caching.testInit(mcd.properties.caching.init.expectedOutput,1)</code>
			</method>
			<method>
				<name>LoadLookup</name>
				<code>mcd.test.caching.testLoadLookup(mcd.properties.caching.loadLookup.expectedOutputIPhone,mcd.properties.caching.loadLookup.expectedOutputAndroid,1)</code>
			</method>
			<method>
				<name>PutJSONObject</name>
				<code>mcd.test.caching.testPutJSONObject(mcd.properties.caching.putJSONObject.objectID,mcd.properties.caching.putJSONObject.JSONObj,mcd.properties.caching.putJSONObject.opt_timestamp,mcd.properties.caching.putJSONObject.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetJSONObject</name>
				<code>mcd.test.caching.testGetJSONObject(mcd.properties.caching.getJSONObject.objectID,mcd.properties.caching.getJSONObject.expectedOutput,1)</code>
			</method>
			<method>
				<name>DeleteJSONObject</name>
				<code>mcd.test.caching.testDeleteJSONObject(mcd.properties.caching.deleteJSONObject.objectID,mcd.properties.caching.deleteJSONObject.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetResourceID</name>
				<code>mcd.test.caching.testGetResourceID(mcd.properties.caching.getResourceID.url,mcd.properties.caching.getResourceID.expectedOutput,1)</code>
			</method>
			<method>
				<name>GetCacheableResource</name>
				<code>mcd.test.caching.testGetCacheableResource(mcd.properties.caching.getCacheableResource.url,mcd.properties.caching.getCacheableResource.opt_timeout,mcd.properties.caching.getCacheableResource.expectedOutput,1)</code>
			</method>
			<method>
				<name>DeleteFromCache</name>
				<code>mcd.test.caching.testDeleteFromCache(mcd.properties.caching.deleteFromCache.url,mcd.properties.caching.deleteFromCache.expectedOutput,1)</code>
			</method>
		</details>
	</library>
	<library>
		<title>Logging</title>
		<details>
			<method>
				<name>IsOK</name>
				<code>mcd.test.QoS.testIsOK(mcd.properties.QoS.isOK.logConstant,mcd.properties.QoS.isOK.logMsg,mcd.properties.QoS.isOK.expectedOutput,1)</code>
			</method>
			<method>
				<name>ResetQoS</name>
				<code>mcd.test.QoS.testResetQoS(mcd.properties.QoS.resetQoS.expectedOutput,1)</code>
			</method>
			<method>
				<name>TimerStart</name>
				<code>mcd.test.QoS.testTimerStart(mcd.properties.QoS.timerStart.expectedOutput,1)</code>
			</method>
			<method>
				<name>TimerCheckpoint</name>
				<code>mcd.test.QoS.testTimerCheckpoint(mcd.properties.QoS.timerCheckpoint.expectedOutput,1)</code>
			</method>
			<method>
				<name>Notify</name>
				<code>mcd.test.QoS.testNotify(mcd.properties.QoS.notify.notifyType, mcd.properties.QoS.notify.notifyMsg,mcd.properties.QoS.notify.expectedOutput,1)</code>
			</method>
		</details>
	</library>
</framework>